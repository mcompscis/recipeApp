-- Query 1
-- This query creates a new recipe by:
--      retreiving the appropriate cuisineID from SampleCuisine table
--      inserting the recipe fields into the SampleRecipe table
--      inserting the appropriate recipe-ingredient tuple in RecipeIngredient
--      creating new tags (if any) in SampleTag
--      Adding recipe-tag tuples to SampleRecipeTag
-- "Indian" is considered user input from the recipe creation page
SET @cuisineID = (SELECT cuisine_id FROM SampleCuisine WHERE cuisine_name =
'Indian');

-- The following query will create a 'Palak Paneer' recipe and insert it into the SampleRecipe table, all values below will be user input from the recipe creation table
INSERT INTO SampleRecipe
            (creator_id,
             recipe_name,
             serves,
             date_submitted,
             cuisine_id,
             description,
             recipe_text,
             calories,
             time_to_prepare,
             img_url)
VALUES     (2,
            'Palak Paneer',
            1,
            '2020-01-02',
            @cuisineID,
            'green paneer dish',
            'recipe_here',
            350,
            50,
'https://www.mineralpro.com/assets/uploads/2015/09/bigstock-Washing-Colorful-Fruits-And-Ve-39688621.jpg'
);

SET @recipeID = (SELECT LAST_INSERT_ID());

-- These insert statements will be genereated by the python backend for each ingredient
-- 'spinach' is an incredient for the above recipe that is specified by the user during recipe creation
INSERT INTO SampleRecipeIngredient
            (recipe_id,
             ingredient_id,
             quantity,
             measurement_type)
VALUES      (@recipeID,
             (SELECT ingredient_id
              FROM   SampleIngredient
              WHERE  ingredient_name = "spinach"),
             2,
             'cups');

-- 'paneer' is an incredient for the above recipe that is specified by the user during recipe creation
INSERT INTO SampleRecipeIngredient
            (recipe_id,
             ingredient_id,
             quantity,
             measurement_type)
VALUES      (@recipeID,
             (SELECT ingredient_id
              FROM   SampleIngredient
              WHERE  ingredient_name = "paneer"),
             2,
             'cups');

-- These insert statements will be generated by the python backend for each tag
-- It is assumed that the user will tag the above recipe as 'vegetarian' during recipe creation
INSERT INTO SampleRecipeTag
            (recipe_id,
             tag_id)
VALUES      (@recipeID,
             (SELECT tag_id
              FROM   SampleTag
              WHERE  tag_text = "vegetarian"));

-- It is assumed that the user will tag the above recipe as 'spicy' during recipe creation
INSERT INTO SampleRecipeTag
            (recipe_id,
             tag_id)
VALUES      (@recipeID,
             (SELECT tag_id
              FROM   SampleTag
              WHERE  tag_text = "spicy")); 

-- Query 2
-- This query filters the list of recipes in SampleRecipe based on cuisine and tag
-- It is assumed in the query below that the user wants to filter for recipes that are 'spicy' and belong to the 'Indian' cuisine
SELECT recipe_id,
       recipe_name,
       avg_rating
FROM   (SELECT tag_text     AS tag,
               sr.recipe_id AS recipe_id,
               recipe_name,
               avg_rating,
               cuisine_name
        FROM   SampleTag AS st
               INNER JOIN SampleRecipeTag AS srt
                       ON st.tag_id = srt.tag_id
               INNER JOIN SampleRecipe AS sr
                       ON srt.recipe_id = sr.recipe_id
               INNER JOIN SampleCuisine AS sc
                       ON sr.cuisine_id = sc.cuisine_id) T
WHERE  tag = 'spicy'
       AND cuisine_name = 'Indian'
ORDER  BY avg_rating DESC; 

-- Query 3
-- This query orders all recipes based on average rating and returns the top 5
SELECT *
FROM   SampleRecipe
ORDER  BY avg_rating DESC
LIMIT  5; 

-- Query 4
-- This query returns all data associated with a specific recipe across the SampleRecipe table, SampleCuisine table, SampleRecipeTag table and SampleRecipeIngredient table,
-- for a specific recipe id.
-- We harcoded recipe_id as 1 but 1 will be replaced by '%s' in the future.
-- It is assumed that '%s' refers to the recipe ID for which we want all of the data
-- GROUP_CONCAT() is used to gather all ingredients/tags into comma separated strings
SELECT T1.recipe_id,
       T1.recipe_name,
       T1.serves,
       T1.date_submitted,
       T1.cuisine_name,
       T1.description,
       T1.recipe_text,
       T1.calories,
       T1.avg_rating,
       T1.time_to_prepare,
       T1.num_ratings,
       T1.img_url,
       T1.ingredients,
       T1.quantities,
       T1.measurement_types,
       GROUP_CONCAT(tag_text) AS tag_text
FROM   (SELECT R.recipe_id,
               R.recipe_name,
               R.serves,
               R.date_submitted,
               C.cuisine_name,
               R.description,
               R.recipe_text,
               R.calories,
               R.avg_rating,
               R.time_to_prepare,
               R.num_ratings,
               R.img_url,
               GROUP_CONCAT(ingredient_name)  AS ingredients,
               GROUP_CONCAT(quantity)         AS quantities,
               GROUP_CONCAT(measurement_type) AS measurement_types
        FROM   SampleRecipe R,
               SampleRecipeIngredient RI,
               SampleIngredient I,
               SampleCuisine C
        WHERE  ( R.recipe_id = 1 )
               AND ( R.recipe_id = RI.recipe_id )
               AND ( RI.ingredient_id = I.ingredient_id )
               AND ( R.cuisine_id = C.cuisine_id )
        GROUP  BY C.cuisine_name,
                  R.description,
                  R.recipe_text,
                  R.calories,
                  R.avg_rating,
                  R.time_to_prepare,
                  R.num_ratings,
                  R.img_url) T1,
       SampleRecipeTag RT,
       SampleTag T
WHERE  ( T1.recipe_id = RT.recipe_id )
       AND ( RT.tag_id = T.tag_id )
GROUP  BY T1.recipe_id,
          T1.recipe_name,
          T1.serves,
          T1.date_submitted,
          T1.cuisine_name,
          T1.description,
          T1.recipe_text,
          T1.calories,
          T1.avg_rating,
          T1.time_to_prepare,
          T1.num_ratings,
          T1.img_url,
          T1.ingredients,
          T1.quantities,
          T1.measurement_types;

-- Query 5
-- This query mimics the interaction queries generated by the backend that will fill the SampleInteraction table
-- Triggers have been set up in the create_sample_tables script that will update the SampleRecipe and SampleUser tables with the new rating and review
-- Below is a sample interaction where the user has rated a dish with a 5/5 and commented on the recipe
-- The values inserted represent user input
INSERT INTO SampleInteraction
            (
                        user_id,
                        recipe_id,
                        interaction_date,
                        rating,
                        review
            )
            VALUE
            (
                        2,1,
                        '2020-2-2',
                        5,
                        'Wow super tasty, i love chicken'
            );

-- Query 6
-- This query filters the SampleRecipe table such that only entries with specified ingredients and those without the specified allergens will be returned
-- The HAVING clause will be modified by the backend to include all filters
-- The query below assumes that the user wants to filter the recipe list based on ingredients like 'chicken' and 'chilli powder'
-- and wants to avoid the ingredient 'paneer'
SELECT R.recipe_id,
       R.recipe_name,
       GROUP_CONCAT(ingredient_name) AS "ingredients"
FROM   SampleRecipe R,
       SampleRecipeIngredient RI,
       SampleIngredient I
WHERE  ( R.recipe_id = RI.recipe_id )
       AND ( RI.ingredient_id = I.ingredient_id )
GROUP  BY R.recipe_id,
          R.recipe_name
HAVING ( ingredients LIKE "%chicken%" )
       AND ( ingredients LIKE "%chilli powder%" )
       AND ( ingredients NOT LIKE "%paneer%" ); 
